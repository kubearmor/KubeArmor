name: ci-merge-coverage

on:
  workflow_run:
    workflows: ["ci-test-ginkgo"]
    types:
      - completed

jobs:
  merge-coverage-files:
    name: Download and merge files
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Check if all required workflows completed successfully
        id: check-workflows
        run: |
            workflows=("ci-test-ginkgo")
            max_retries=20  # Set a max retry limit (e.g., 20 retries with 120-second intervals)
            interval=120    # Set interval in seconds between retries
            all_completed=false

            commit_sha=$(git rev-parse HEAD)

            for workflow in "${workflows[@]}"; do
            echo "${workflow}_status=pending" >> $GITHUB_ENV
            done

            for (( i=0; i<$max_retries; i++ )); do
            all_completed=true

            for workflow in "${workflows[@]}"; do
                conclusion=$(gh run list --workflow=$workflow --branch=main --json conclusion,headSha | jq -r --arg sha "$commit_sha" '.[] | select(.headSha == $sha) | .conclusion')

                if [[ -z "$conclusion" ]]; then
                conclusion="pending"
                fi

                if [[ "$conclusion" != "success" ]]; then
                all_completed=false
                fi

                echo "${workflow}_status=$conclusion" >> $GITHUB_ENV
            done

            if [[ "$all_completed" == "true" ]]; then
                echo "All workflows completed successfully for commit $commit_sha."
                echo "all_succeeded=true" >> $GITHUB_ENV
                break
            fi

            if [[ "$i" -eq $((max_retries - 1)) ]]; then
                echo "Timeout waiting for workflows to complete for commit $commit_sha."
                exit 1
            else
                sleep $interval
            fi
            done
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - uses: actions/setup-go@v5
        with:
          go-version-file: 'KubeArmor/go.mod'

      - name: Download k8s coverage files from ci-test-ginkgo
        if: ${{ env.ci-test-ginkgo_status == 'success' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ci-test-ginkgo.yml
          name: coverage.*
          path: KubeArmor/
          name_is_regexp: true
          search_artifacts: true

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}