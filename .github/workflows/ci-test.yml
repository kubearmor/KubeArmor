name: ci-test

on:
  push:
    branches: [main]
    paths: 
    - 'KubeArmor/**'
    - 'tests/**'
    - 'protobuf/**'
    - '.github/workflows/ci-test.yml'
  pull_request:
    branches: [main]
    paths: 
    - 'KubeArmor/**'
    - 'tests/**'
    - 'protobuf/**'
    - '.github/workflows/ci-test.yml'

jobs:
  build:
    name: Auto-testing Framework / ${{ matrix.os }} / ${{ matrix.runtime }}
    runs-on: ${{ matrix.os }}
    env:
      RUNTIME: ${{ matrix.runtime }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-18.04]
        runtime: ["containerd", "docker", "crio"]
    steps:
      - name: Kernel version
        run: uname -r

      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build bcc
        run: |
          set -x
          sudo apt-get update
          sudo apt-get -y install build-essential cmake bison flex git python3 python3-pip clang-9 libllvm9 llvm-9-dev libclang-9-dev zlib1g-dev libelf-dev libedit-dev libfl-dev
          pushd /tmp
          git clone --branch v0.24.0 --depth 1 https://github.com/iovisor/bcc.git
          mkdir -p bcc/build; cd bcc/build
          sudo ln -s /usr/lib/llvm-9 /usr/local/llvm
          cmake .. -DPYTHON_CMD=python3 -DCMAKE_INSTALL_PREFIX=/usr
          make -j$(nproc)
          sudo make install
          popd

      - name: Setup Enviroment
        run: |
          if [ "$RUNTIME" == "crio" ]; then
            ./contribution/self-managed-k8s/crio/install-crio.sh
            crio --version
          fi
          RUNTIME=$RUNTIME ./contribution/k3s/install_k3s.sh

      - name: Install annotation controller
        run: |
          kubectl apply -f deployments/annotations/cert-manager.yaml
          kubectl wait pods --for=condition=ready -n cert-manager -l app.kubernetes.io/instance=cert-manager
          kubectl apply -f deployments/annotations/kubearmor-annotation-manager.yaml
          kubectl wait pods --for=condition=ready -n kube-system -l kubearmor-app=kubearmor-annotation-manager

      - name: Run kubectl proxy
        run: kubectl proxy &

      - name: Run kubearmor in local process mode
        run: |
          pwd
          make -C KubeArmor/ run 2>&1 > /tmp/kubearmor.msg &
        timeout-minutes: 5

      - name: ginkgo kubearmor tests
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          make -C tests/
        timeout-minutes: 5

      - name: Test KubeArmor
        run: RUNTIME=$RUNTIME ./tests/test-scenarios-github.sh
        timeout-minutes: 15

      - name: Archive log artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: kubearmor.logs
          path: |
            /tmp/kubearmor.test
            /tmp/kubearmor.log
            /tmp/kubearmor.msg

      - name: Check Results
        if: ${{ always() }}
        run: cat /tmp/kubearmor.test

      - name: Measure Code Coverage
        if: ${{ always() }}
        run: |
          go get github.com/modocache/gover
          gover    
          go tool cover -func=gover.coverprofile
        working-directory: KubeArmor
        env:
          GOPATH: /home/runner/go

      - uses: codecov/codecov-action@v2
        if: ${{ always() }}
        with:
          files: ./KubeArmor/gover.coverprofile
