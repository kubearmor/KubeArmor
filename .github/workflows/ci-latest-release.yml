name: ci-latest-release

on:
  push:
    branches:
      - "main"
      - "v*"
    paths:
      - "KubeArmor/**"
      - "tests/**"
      - "protobuf/**"
      - ".github/workflows/ci-latest-release.yml"
      - "!STABLE-RELEASE"

  create:
    branches:
      - "v*"

jobs:
  build:
    name: Create KubeArmor latest release
    if: github.repository == 'kubearmor/kubearmor'
    runs-on: ubuntu-20.04
    permissions:
      id-token: write 
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-go@v3
        with:
          go-version: v1.18

      - name: Install the latest LLVM toolchain
        run: ./.github/workflows/install-llvm.sh

      - name: Compile libbpf
        run: ./.github/workflows/install-libbpf.sh

      - name: Setup a Kubernetes enviroment
        id: vars
        run: |
          if [ ${{ github.ref }} == "refs/heads/main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          fi
          RUNTIME=docker ./contribution/k3s/install_k3s.sh

      - name: Install an annotation controller
        run: ./.github/workflows/install-annotation-controller.sh

      - name: Generate KubeArmor artifacts
        run: GITHUB_SHA=$GITHUB_SHA ./KubeArmor/build/build_kubearmor.sh ${{ steps.vars.outputs.tag }}

      - name: Deploy KubeArmor into Kubernetes
        run: |
          sed -i 's/kubearmor\/kubearmor:latest/kubearmor\/kubearmor:${{ steps.vars.outputs.tag }}/g' ./KubeArmor/build/kubearmor-test-docker.yaml
          sed -i 's/kubearmor\/kubearmor-init:latest/kubearmor\/kubearmor-init:${{ steps.vars.outputs.tag }}/g' ./KubeArmor/build/kubearmor-test-docker.yaml
          kubectl apply -f deployments/CRD
          kubectl apply -f ./KubeArmor/build/kubearmor-test-docker.yaml
          kubectl wait --for=condition=ready --timeout=5m -n kube-system pod -l kubearmor-app=kubearmor

      - name: Test KubeArmor using Ginkgo
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          make -C tests/
        timeout-minutes: 30

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_AUTHTOK }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64/v8

      - name: Push KubeArmor images to Docker
        run: GITHUB_SHA=$GITHUB_SHA ./KubeArmor/build/push_kubearmor.sh ${{ steps.vars.outputs.tag }}

      - name: Install Cosign 
        uses: sigstore/cosign-installer@main

      - name: Get Image Digest
        id: digest
        run: | 
          echo "imagedigest=$(jq -r '.["containerimage.digest"]' kubearmor.json)" >> $GITHUB_OUTPUT
          echo "initdigest=$(jq -r '.["containerimage.digest"]' kubearmor-init.json)" >> $GITHUB_OUTPUT

      - name: Install Bom
        shell: bash
        run: |
          curl -L https://github.com/kubernetes-sigs/bom/releases/download/v0.4.1/bom-linux-amd64 -o bom
          sudo mv ./bom /usr/local/bin/bom
          sudo chmod +x /usr/local/bin/bom
      
      - name: Generate SBOM
        shell: bash
        run: |
          bom generate -o sbom_kubearmor_${{ steps.digest.outputs.imagedigest }}.spdx --dirs=. \
          --image=kubearmor/kubearmor@${{ steps.digest.outputs.imagedigest }}
          bom generate -o sbom_kubearmor_${{ steps.digest.outputs.initdigest }}.spdx --dirs=. \
          --image=kubearmor/kubearmor-init@${{ steps.digest.outputs.initdigest }}
      
      - name: Attach SBOM to Container Image
        run: |
          cosign attach sbom --sbom sbom_kubearmor_${{ steps.digest.outputs.imagedigest }}.spdx kubearmor/kubearmor@${{ steps.digest.outputs.imagedigest }}
          cosign attach sbom --sbom sbom_kubearmor_${{ steps.digest.outputs.initdigest  }}.spdx kubearmor/kubearmor@${{ steps.digest.outputs.initdigest  }}

      - name: Sign the Container Images
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign -r kubearmor/kubearmor@${{ steps.digest.outputs.imagedigest }}
          cosign sign -r kubearmor/kubearmor-init@${{ steps.digest.outputs.initdigest }}

  push-stable-version:
    name: Create KubeArmor stable release
    needs: build
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Pull a specific version of KubeArmor from Docker Hub
        id: match
        run: |
          value=`cat STABLE-RELEASE`
          if [ ${{ github.ref }} == refs/heads/$value ]; then
            docker pull docker.io/kubearmor/kubearmor:$value
            docker image tag kubearmor/kubearmor:$value kubearmor/kubearmor:stable
            echo "tag=true" >> $GITHUB_OUTPUT
          else
            echo "tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Hub
        if: steps.match.outputs.tag == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_AUTHTOK }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64/v8

      - name: Push the stable version of KubeArmor to Docker Hub
        if: steps.match.outputs.tag == 'true'
        run: STABLE_VERSION=$(cat STABLE-RELEASE) GITHUB_SHA=$GITHUB_SHA ./KubeArmor/build/push_kubearmor.sh stable

      - name: Install Cosign 
        uses: sigstore/cosign-installer@main

      - name: Get Image Digest
        id: digest
        run: | 
          ls -l
          echo "imagedigest=$(jq -r '.["containerimage.digest"]' kubearmor.json)" >> $GITHUB_OUTPUT
          echo "initdigest=$(jq -r '.["containerimage.digest"]' kubearmor-init.json)" >> $GITHUB_OUTPUT
          echo $imagedigest 
          echo $initdigest 

      - name: Install Bom
        shell: bash
        run: |
          curl -L https://github.com/kubernetes-sigs/bom/releases/download/v0.4.1/bom-linux-amd64 -o bom
          sudo mv ./bom /usr/local/bin/bom
          sudo chmod +x /usr/local/bin/bom
      
      - name: Generate SBOM
        shell: bash
        run: |
          bom generate -o sbom_kubearmor_${{ steps.digest.outputs.imagedigest }}.spdx --dirs=. \
          --image=kubearmor/kubearmor@${{ steps.digest.outputs.imagedigest }}
          bom generate -o sbom_kubearmor_${{ steps.digest.outputs.initdigest }}.spdx --dirs=. \
          --image=kubearmor/kubearmor-init@${{ steps.digest.outputs.initdigest }}
      
      - name: Attach SBOM to Container Image
        run: |
          cosign attach sbom --sbom sbom_kubearmor_${{ steps.digest.outputs.imagedigest }}.spdx kubearmor/kubearmor@${{ steps.digest.outputs.imagedigest }}
          cosign attach sbom --sbom sbom_kubearmor_${{ steps.digest.outputs.initdigest  }}.spdx kubearmor/kubearmor@${{ steps.digest.outputs.initdigest  }}


      - name: Sign the Container Images
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign -r kubearmor/kubearmor@${{ steps.digest.outputs.imagedigest }}
          cosign sign -r kubearmor/kubearmor-init@${{ steps.digest.outputs.initdigest }}
