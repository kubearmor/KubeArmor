name: ci-test

on:
  push:
    branches: [main]
    paths: 
    - 'KubeArmor/**'
    - 'tests/**'
    - 'protobuf/**'
  pull_request:
    branches: [main]
    paths: 
    - 'KubeArmor/**'
    - 'tests/**'
    - 'protobuf/**'

jobs:
  build:
    name: Auto-testing Framework / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-18.04]
    steps:
      - name: Kernel version
        run: uname -r

      - name: Check Docker Version
        run: docker --version

      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build bcc
        run: |
          set -x
          sudo apt-get update
          sudo apt-get -y install build-essential cmake bison flex git python3 python3-pip clang-9 libllvm9 llvm-9-dev libclang-9-dev zlib1g-dev libelf-dev libedit-dev libfl-dev
          pushd /tmp
          git clone https://github.com/iovisor/bcc.git
          mkdir -p bcc/build; cd bcc/build
          sudo ln -s /usr/lib/llvm-9 /usr/local/llvm
          cmake .. -DPYTHON_CMD=python3 -DCMAKE_INSTALL_PREFIX=/usr
          make -j$(nproc)
          sudo make install
          popd

      - name: Test KubeArmor
        run: ./tests/go-test-kubearmor-local.sh
        env:
          GOPATH: /home/runner/go

      - name: Build KubeArmor Test Binary
        run: make build-test
        working-directory: KubeArmor
        env:
          GOPATH: /home/runner/go

      - name: Setup Enviroment
        run: |
          # install kernel-headers
          sudo apt-get update
          sudo apt-get install -y linux-headers-$(uname -r)

          # install kubeadm
          sudo apt-get update
          sudo apt-get install -y apt-transport-https curl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          sudo touch /etc/apt/sources.list.d/kubernetes.list
          echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubelet=1.21.3-00 kubeadm=1.21.3-00 kubectl=1.21.3-00
          sudo apt-mark hold kubelet kubeadm kubectl

          # install apparmor and auditd
          sudo apt-get install -y apparmor apparmor-utils auditd
          sudo systemctl start apparmor; sudo systemctl start auditd

          # turn off swap
          sudo swapoff -a

          # initialize kubernetes
          sudo kubeadm init --pod-network-cidr=10.244.0.0/16 | tee -a ~/k8s_init.log

          # copy k8s config
          mkdir -p $HOME/.kube
          sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
          sudo chown $USER:$USER $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          echo "export KUBECONFIG=$HOME/.kube/config" | tee -a ~/.bashrc

          # install flannel
          kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.13.0/Documentation/kube-flannel.yml

          # disable master isolation
          kubectl taint nodes --all node-role.kubernetes.io/master-

      - name: Run kubectl proxy
        run: kubectl proxy &

      - name: Run Auto Testing Framework
        run: ./tests/test-scenarios-github.sh
        timeout-minutes: 15

      - name: Archive log artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: kubearmor.logs
          path: |
            /tmp/kubearmor.test
            /tmp/kubearmor.log
            /tmp/kubearmor.msg

      - name: Check Results
        if: ${{ always() }}
        run: cat /tmp/kubearmor.test

      - name: Measure Code Coverage
        if: ${{ always() }}
        run: |
          go get github.com/modocache/gover
          gover    
          go tool cover -func=gover.coverprofile
        working-directory: KubeArmor
        env:
          GOPATH: /home/runner/go

      - uses: codecov/codecov-action@v2
        if: ${{ always() }}
        with:
          files: ./KubeArmor/gover.coverprofile
