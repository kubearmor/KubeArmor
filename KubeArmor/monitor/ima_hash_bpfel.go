// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package monitor

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type ima_hashImaHashT struct {
	_      structs.HostLayout
	Digest [32]uint8
}

type ima_hashOuterKey struct {
	_     structs.HostLayout
	PidNs uint32
	MntNs uint32
}

// loadIma_hash returns the embedded CollectionSpec for ima_hash.
func loadIma_hash() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Ima_hashBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ima_hash: %w", err)
	}

	return spec, err
}

// loadIma_hashObjects loads ima_hash and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ima_hashObjects
//	*ima_hashPrograms
//	*ima_hashMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIma_hashObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIma_hash()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ima_hashSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ima_hashSpecs struct {
	ima_hashProgramSpecs
	ima_hashMapSpecs
	ima_hashVariableSpecs
}

// ima_hashProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ima_hashProgramSpecs struct {
	ImaBprmCheckSecurity *ebpf.ProgramSpec `ebpf:"ima_bprm_check_security"`
}

// ima_hashMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ima_hashMapSpecs struct {
	KubearmorConfig     *ebpf.MapSpec `ebpf:"kubearmor_config"`
	KubearmorImaHashMap *ebpf.MapSpec `ebpf:"kubearmor_ima_hash_map"`
	KubearmorVisibility *ebpf.MapSpec `ebpf:"kubearmor_visibility"`
}

// ima_hashVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ima_hashVariableSpecs struct {
}

// ima_hashObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIma_hashObjects or ebpf.CollectionSpec.LoadAndAssign.
type ima_hashObjects struct {
	ima_hashPrograms
	ima_hashMaps
	ima_hashVariables
}

func (o *ima_hashObjects) Close() error {
	return _Ima_hashClose(
		&o.ima_hashPrograms,
		&o.ima_hashMaps,
	)
}

// ima_hashMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIma_hashObjects or ebpf.CollectionSpec.LoadAndAssign.
type ima_hashMaps struct {
	KubearmorConfig     *ebpf.Map `ebpf:"kubearmor_config"`
	KubearmorImaHashMap *ebpf.Map `ebpf:"kubearmor_ima_hash_map"`
	KubearmorVisibility *ebpf.Map `ebpf:"kubearmor_visibility"`
}

func (m *ima_hashMaps) Close() error {
	return _Ima_hashClose(
		m.KubearmorConfig,
		m.KubearmorImaHashMap,
		m.KubearmorVisibility,
	)
}

// ima_hashVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadIma_hashObjects or ebpf.CollectionSpec.LoadAndAssign.
type ima_hashVariables struct {
}

// ima_hashPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIma_hashObjects or ebpf.CollectionSpec.LoadAndAssign.
type ima_hashPrograms struct {
	ImaBprmCheckSecurity *ebpf.Program `ebpf:"ima_bprm_check_security"`
}

func (p *ima_hashPrograms) Close() error {
	return _Ima_hashClose(
		p.ImaBprmCheckSecurity,
	)
}

func _Ima_hashClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ima_hash_bpfel.o
var _Ima_hashBytes []byte
