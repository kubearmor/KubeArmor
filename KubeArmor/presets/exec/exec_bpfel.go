// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package exec

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type execArgBufsK struct {
	_    structs.HostLayout
	Okey struct {
		_     structs.HostLayout
		PidNs uint32
		MntNs uint32
	}
	Store execBufsK
	Arg   [256]int8
}

type execArgVal struct {
	_         structs.HostLayout
	ArgsArray [256]int8
}

type execBufsK struct {
	_      structs.HostLayout
	Path   [256]int8
	Source [256]int8
}

type execBufsT struct {
	_   structs.HostLayout
	Buf [32768]int8
}

type execCmdArgsKey struct {
	_    structs.HostLayout
	Tgid uint64
	Ind  uint64
}

// loadExec returns the embedded CollectionSpec for exec.
func loadExec() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExecBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load exec: %w", err)
	}

	return spec, err
}

// loadExecObjects loads exec and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*execObjects
//	*execPrograms
//	*execMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadExecObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadExec()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// execSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execSpecs struct {
	execProgramSpecs
	execMapSpecs
	execVariableSpecs
}

// execProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execProgramSpecs struct {
	ExecPresetBprmCheckSecurity *ebpf.ProgramSpec `ebpf:"exec_preset_bprm_check_security"`
}

// execMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execMapSpecs struct {
	ArgsBufk                      *ebpf.MapSpec `ebpf:"args_bufk"`
	Bufk                          *ebpf.MapSpec `ebpf:"bufk"`
	Bufs                          *ebpf.MapSpec `ebpf:"bufs"`
	BufsOff                       *ebpf.MapSpec `ebpf:"bufs_off"`
	CmdArgsBuf                    *ebpf.MapSpec `ebpf:"cmd_args_buf"`
	Events                        *ebpf.MapSpec `ebpf:"events"`
	KubearmorAlertThrottle        *ebpf.MapSpec `ebpf:"kubearmor_alert_throttle"`
	KubearmorArgsStore            *ebpf.MapSpec `ebpf:"kubearmor_args_store"`
	KubearmorArguments            *ebpf.MapSpec `ebpf:"kubearmor_arguments"`
	KubearmorConfig               *ebpf.MapSpec `ebpf:"kubearmor_config"`
	KubearmorContainers           *ebpf.MapSpec `ebpf:"kubearmor_containers"`
	KubearmorEvents               *ebpf.MapSpec `ebpf:"kubearmor_events"`
	KubearmorExecPids             *ebpf.MapSpec `ebpf:"kubearmor_exec_pids"`
	KubearmorExecPresetContainers *ebpf.MapSpec `ebpf:"kubearmor_exec_preset_containers"`
}

// execVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// execObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadExecObjects or ebpf.CollectionSpec.LoadAndAssign.
type execObjects struct {
	execPrograms
	execMaps
	execVariables
}

func (o *execObjects) Close() error {
	return _ExecClose(
		&o.execPrograms,
		&o.execMaps,
	)
}

// execMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadExecObjects or ebpf.CollectionSpec.LoadAndAssign.
type execMaps struct {
	ArgsBufk                      *ebpf.Map `ebpf:"args_bufk"`
	Bufk                          *ebpf.Map `ebpf:"bufk"`
	Bufs                          *ebpf.Map `ebpf:"bufs"`
	BufsOff                       *ebpf.Map `ebpf:"bufs_off"`
	CmdArgsBuf                    *ebpf.Map `ebpf:"cmd_args_buf"`
	Events                        *ebpf.Map `ebpf:"events"`
	KubearmorAlertThrottle        *ebpf.Map `ebpf:"kubearmor_alert_throttle"`
	KubearmorArgsStore            *ebpf.Map `ebpf:"kubearmor_args_store"`
	KubearmorArguments            *ebpf.Map `ebpf:"kubearmor_arguments"`
	KubearmorConfig               *ebpf.Map `ebpf:"kubearmor_config"`
	KubearmorContainers           *ebpf.Map `ebpf:"kubearmor_containers"`
	KubearmorEvents               *ebpf.Map `ebpf:"kubearmor_events"`
	KubearmorExecPids             *ebpf.Map `ebpf:"kubearmor_exec_pids"`
	KubearmorExecPresetContainers *ebpf.Map `ebpf:"kubearmor_exec_preset_containers"`
}

func (m *execMaps) Close() error {
	return _ExecClose(
		m.ArgsBufk,
		m.Bufk,
		m.Bufs,
		m.BufsOff,
		m.CmdArgsBuf,
		m.Events,
		m.KubearmorAlertThrottle,
		m.KubearmorArgsStore,
		m.KubearmorArguments,
		m.KubearmorConfig,
		m.KubearmorContainers,
		m.KubearmorEvents,
		m.KubearmorExecPids,
		m.KubearmorExecPresetContainers,
	)
}

// execVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadExecObjects or ebpf.CollectionSpec.LoadAndAssign.
type execVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// execPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadExecObjects or ebpf.CollectionSpec.LoadAndAssign.
type execPrograms struct {
	ExecPresetBprmCheckSecurity *ebpf.Program `ebpf:"exec_preset_bprm_check_security"`
}

func (p *execPrograms) Close() error {
	return _ExecClose(
		p.ExecPresetBprmCheckSecurity,
	)
}

func _ExecClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed exec_bpfel.o
var _ExecBytes []byte
