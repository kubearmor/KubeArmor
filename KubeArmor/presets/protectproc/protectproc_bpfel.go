// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package protectproc

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type protectprocBufsK struct {
	Path   [256]int8
	Source [256]int8
}

type protectprocBufsT struct{ Buf [32768]int8 }

type protectprocPathname struct{ Path [256]int8 }

// loadProtectproc returns the embedded CollectionSpec for protectproc.
func loadProtectproc() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProtectprocBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load protectproc: %w", err)
	}

	return spec, err
}

// loadProtectprocObjects loads protectproc and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*protectprocObjects
//	*protectprocPrograms
//	*protectprocMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProtectprocObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProtectproc()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// protectprocSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type protectprocSpecs struct {
	protectprocProgramSpecs
	protectprocMapSpecs
	protectprocVariableSpecs
}

// protectprocProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type protectprocProgramSpecs struct {
	EnforceFile *ebpf.ProgramSpec `ebpf:"enforce_file"`
}

// protectprocMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type protectprocMapSpecs struct {
	Bufk                        *ebpf.MapSpec `ebpf:"bufk"`
	Bufs                        *ebpf.MapSpec `ebpf:"bufs"`
	BufsOff                     *ebpf.MapSpec `ebpf:"bufs_off"`
	Events                      *ebpf.MapSpec `ebpf:"events"`
	KubearmorAlertThrottle      *ebpf.MapSpec `ebpf:"kubearmor_alert_throttle"`
	KubearmorConfig             *ebpf.MapSpec `ebpf:"kubearmor_config"`
	KubearmorContainers         *ebpf.MapSpec `ebpf:"kubearmor_containers"`
	KubearmorEvents             *ebpf.MapSpec `ebpf:"kubearmor_events"`
	KubearmorExecPids           *ebpf.MapSpec `ebpf:"kubearmor_exec_pids"`
	ProcFileAccess              *ebpf.MapSpec `ebpf:"proc_file_access"`
	ProtectprocPresetContainers *ebpf.MapSpec `ebpf:"protectproc_preset_containers"`
}

// protectprocVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type protectprocVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// protectprocObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProtectprocObjects or ebpf.CollectionSpec.LoadAndAssign.
type protectprocObjects struct {
	protectprocPrograms
	protectprocMaps
	protectprocVariables
}

func (o *protectprocObjects) Close() error {
	return _ProtectprocClose(
		&o.protectprocPrograms,
		&o.protectprocMaps,
	)
}

// protectprocMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProtectprocObjects or ebpf.CollectionSpec.LoadAndAssign.
type protectprocMaps struct {
	Bufk                        *ebpf.Map `ebpf:"bufk"`
	Bufs                        *ebpf.Map `ebpf:"bufs"`
	BufsOff                     *ebpf.Map `ebpf:"bufs_off"`
	Events                      *ebpf.Map `ebpf:"events"`
	KubearmorAlertThrottle      *ebpf.Map `ebpf:"kubearmor_alert_throttle"`
	KubearmorConfig             *ebpf.Map `ebpf:"kubearmor_config"`
	KubearmorContainers         *ebpf.Map `ebpf:"kubearmor_containers"`
	KubearmorEvents             *ebpf.Map `ebpf:"kubearmor_events"`
	KubearmorExecPids           *ebpf.Map `ebpf:"kubearmor_exec_pids"`
	ProcFileAccess              *ebpf.Map `ebpf:"proc_file_access"`
	ProtectprocPresetContainers *ebpf.Map `ebpf:"protectproc_preset_containers"`
}

func (m *protectprocMaps) Close() error {
	return _ProtectprocClose(
		m.Bufk,
		m.Bufs,
		m.BufsOff,
		m.Events,
		m.KubearmorAlertThrottle,
		m.KubearmorConfig,
		m.KubearmorContainers,
		m.KubearmorEvents,
		m.KubearmorExecPids,
		m.ProcFileAccess,
		m.ProtectprocPresetContainers,
	)
}

// protectprocVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadProtectprocObjects or ebpf.CollectionSpec.LoadAndAssign.
type protectprocVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// protectprocPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProtectprocObjects or ebpf.CollectionSpec.LoadAndAssign.
type protectprocPrograms struct {
	EnforceFile *ebpf.Program `ebpf:"enforce_file"`
}

func (p *protectprocPrograms) Close() error {
	return _ProtectprocClose(
		p.EnforceFile,
	)
}

func _ProtectprocClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed protectproc_bpfel.o
var _ProtectprocBytes []byte
