// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package anonmapexec

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type anonmapexecArgBufsK struct {
	_    structs.HostLayout
	Okey struct {
		_     structs.HostLayout
		PidNs uint32
		MntNs uint32
	}
	Store anonmapexecBufsK
	Arg   [256]int8
}

type anonmapexecArgVal struct {
	_         structs.HostLayout
	ArgsArray [256]int8
}

type anonmapexecBufsK struct {
	_      structs.HostLayout
	Path   [256]int8
	Source [256]int8
}

type anonmapexecBufsT struct {
	_   structs.HostLayout
	Buf [32768]int8
}

type anonmapexecCmdArgsKey struct {
	_    structs.HostLayout
	Tgid uint64
	Ind  uint64
}

// loadAnonmapexec returns the embedded CollectionSpec for anonmapexec.
func loadAnonmapexec() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AnonmapexecBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load anonmapexec: %w", err)
	}

	return spec, err
}

// loadAnonmapexecObjects loads anonmapexec and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*anonmapexecObjects
//	*anonmapexecPrograms
//	*anonmapexecMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAnonmapexecObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAnonmapexec()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// anonmapexecSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type anonmapexecSpecs struct {
	anonmapexecProgramSpecs
	anonmapexecMapSpecs
	anonmapexecVariableSpecs
}

// anonmapexecProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type anonmapexecProgramSpecs struct {
	EnforceMmapFile *ebpf.ProgramSpec `ebpf:"enforce_mmap_file"`
}

// anonmapexecMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type anonmapexecMapSpecs struct {
	ArgsBufk                             *ebpf.MapSpec `ebpf:"args_bufk"`
	Bufk                                 *ebpf.MapSpec `ebpf:"bufk"`
	Bufs                                 *ebpf.MapSpec `ebpf:"bufs"`
	BufsOff                              *ebpf.MapSpec `ebpf:"bufs_off"`
	CmdArgsBuf                           *ebpf.MapSpec `ebpf:"cmd_args_buf"`
	Events                               *ebpf.MapSpec `ebpf:"events"`
	KubearmorAlertThrottle               *ebpf.MapSpec `ebpf:"kubearmor_alert_throttle"`
	KubearmorAnonMapExecPresetContainers *ebpf.MapSpec `ebpf:"kubearmor_anon_map_exec_preset_containers"`
	KubearmorArgsStore                   *ebpf.MapSpec `ebpf:"kubearmor_args_store"`
	KubearmorArguments                   *ebpf.MapSpec `ebpf:"kubearmor_arguments"`
	KubearmorConfig                      *ebpf.MapSpec `ebpf:"kubearmor_config"`
	KubearmorContainers                  *ebpf.MapSpec `ebpf:"kubearmor_containers"`
	KubearmorEvents                      *ebpf.MapSpec `ebpf:"kubearmor_events"`
	KubearmorExecPids                    *ebpf.MapSpec `ebpf:"kubearmor_exec_pids"`
}

// anonmapexecVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type anonmapexecVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// anonmapexecObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAnonmapexecObjects or ebpf.CollectionSpec.LoadAndAssign.
type anonmapexecObjects struct {
	anonmapexecPrograms
	anonmapexecMaps
	anonmapexecVariables
}

func (o *anonmapexecObjects) Close() error {
	return _AnonmapexecClose(
		&o.anonmapexecPrograms,
		&o.anonmapexecMaps,
	)
}

// anonmapexecMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAnonmapexecObjects or ebpf.CollectionSpec.LoadAndAssign.
type anonmapexecMaps struct {
	ArgsBufk                             *ebpf.Map `ebpf:"args_bufk"`
	Bufk                                 *ebpf.Map `ebpf:"bufk"`
	Bufs                                 *ebpf.Map `ebpf:"bufs"`
	BufsOff                              *ebpf.Map `ebpf:"bufs_off"`
	CmdArgsBuf                           *ebpf.Map `ebpf:"cmd_args_buf"`
	Events                               *ebpf.Map `ebpf:"events"`
	KubearmorAlertThrottle               *ebpf.Map `ebpf:"kubearmor_alert_throttle"`
	KubearmorAnonMapExecPresetContainers *ebpf.Map `ebpf:"kubearmor_anon_map_exec_preset_containers"`
	KubearmorArgsStore                   *ebpf.Map `ebpf:"kubearmor_args_store"`
	KubearmorArguments                   *ebpf.Map `ebpf:"kubearmor_arguments"`
	KubearmorConfig                      *ebpf.Map `ebpf:"kubearmor_config"`
	KubearmorContainers                  *ebpf.Map `ebpf:"kubearmor_containers"`
	KubearmorEvents                      *ebpf.Map `ebpf:"kubearmor_events"`
	KubearmorExecPids                    *ebpf.Map `ebpf:"kubearmor_exec_pids"`
}

func (m *anonmapexecMaps) Close() error {
	return _AnonmapexecClose(
		m.ArgsBufk,
		m.Bufk,
		m.Bufs,
		m.BufsOff,
		m.CmdArgsBuf,
		m.Events,
		m.KubearmorAlertThrottle,
		m.KubearmorAnonMapExecPresetContainers,
		m.KubearmorArgsStore,
		m.KubearmorArguments,
		m.KubearmorConfig,
		m.KubearmorContainers,
		m.KubearmorEvents,
		m.KubearmorExecPids,
	)
}

// anonmapexecVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadAnonmapexecObjects or ebpf.CollectionSpec.LoadAndAssign.
type anonmapexecVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// anonmapexecPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAnonmapexecObjects or ebpf.CollectionSpec.LoadAndAssign.
type anonmapexecPrograms struct {
	EnforceMmapFile *ebpf.Program `ebpf:"enforce_mmap_file"`
}

func (p *anonmapexecPrograms) Close() error {
	return _AnonmapexecClose(
		p.EnforceMmapFile,
	)
}

func _AnonmapexecClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed anonmapexec_bpfel.o
var _AnonmapexecBytes []byte
