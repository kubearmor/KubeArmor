// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package dns

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDnskprobe returns the embedded CollectionSpec for dnskprobe.
func loadDnskprobe() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DnskprobeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dnskprobe: %w", err)
	}

	return spec, err
}

// loadDnskprobeObjects loads dnskprobe and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dnskprobeObjects
//	*dnskprobePrograms
//	*dnskprobeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDnskprobeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDnskprobe()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dnskprobeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnskprobeSpecs struct {
	dnskprobeProgramSpecs
	dnskprobeMapSpecs
}

// dnskprobeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnskprobeProgramSpecs struct {
	IgUdpSendmsg *ebpf.ProgramSpec `ebpf:"ig_udp_sendmsg"`
}

// dnskprobeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnskprobeMapSpecs struct {
	DnsContainerMaps *ebpf.MapSpec `ebpf:"dns_container_maps"`
	DnsSharedMap     *ebpf.MapSpec `ebpf:"dns_shared_map"`
	SocketPrint      *ebpf.MapSpec `ebpf:"socket_print"`
}

// dnskprobeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDnskprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnskprobeObjects struct {
	dnskprobePrograms
	dnskprobeMaps
}

func (o *dnskprobeObjects) Close() error {
	return _DnskprobeClose(
		&o.dnskprobePrograms,
		&o.dnskprobeMaps,
	)
}

// dnskprobeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDnskprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnskprobeMaps struct {
	DnsContainerMaps *ebpf.Map `ebpf:"dns_container_maps"`
	DnsSharedMap     *ebpf.Map `ebpf:"dns_shared_map"`
	SocketPrint      *ebpf.Map `ebpf:"socket_print"`
}

func (m *dnskprobeMaps) Close() error {
	return _DnskprobeClose(
		m.DnsContainerMaps,
		m.DnsSharedMap,
		m.SocketPrint,
	)
}

// dnskprobePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDnskprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnskprobePrograms struct {
	IgUdpSendmsg *ebpf.Program `ebpf:"ig_udp_sendmsg"`
}

func (p *dnskprobePrograms) Close() error {
	return _DnskprobeClose(
		p.IgUdpSendmsg,
	)
}

func _DnskprobeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dnskprobe_x86_bpfel.o
var _DnskprobeBytes []byte
