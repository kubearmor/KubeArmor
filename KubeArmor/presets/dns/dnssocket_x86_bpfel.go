// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package dns

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDnssocket returns the embedded CollectionSpec for dnssocket.
func loadDnssocket() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DnssocketBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dnssocket: %w", err)
	}

	return spec, err
}

// loadDnssocketObjects loads dnssocket and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dnssocketObjects
//	*dnssocketPrograms
//	*dnssocketMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDnssocketObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDnssocket()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dnssocketSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnssocketSpecs struct {
	dnssocketProgramSpecs
	dnssocketMapSpecs
}

// dnssocketSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnssocketProgramSpecs struct {
	SimpleSocketHandler *ebpf.ProgramSpec `ebpf:"simple_socket_handler"`
}

// dnssocketMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnssocketMapSpecs struct {
	DnsSharedMap *ebpf.MapSpec `ebpf:"dns_shared_map"`
	SocketEvents *ebpf.MapSpec `ebpf:"socket_events"`
}

// dnssocketObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDnssocketObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnssocketObjects struct {
	dnssocketPrograms
	dnssocketMaps
}

func (o *dnssocketObjects) Close() error {
	return _DnssocketClose(
		&o.dnssocketPrograms,
		&o.dnssocketMaps,
	)
}

// dnssocketMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDnssocketObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnssocketMaps struct {
	DnsSharedMap *ebpf.Map `ebpf:"dns_shared_map"`
	SocketEvents *ebpf.Map `ebpf:"socket_events"`
}

func (m *dnssocketMaps) Close() error {
	return _DnssocketClose(
		m.DnsSharedMap,
		m.SocketEvents,
	)
}

// dnssocketPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDnssocketObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnssocketPrograms struct {
	SimpleSocketHandler *ebpf.Program `ebpf:"simple_socket_handler"`
}

func (p *dnssocketPrograms) Close() error {
	return _DnssocketClose(
		p.SimpleSocketHandler,
	)
}

func _DnssocketClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dnssocket_x86_bpfel.o
var _DnssocketBytes []byte
