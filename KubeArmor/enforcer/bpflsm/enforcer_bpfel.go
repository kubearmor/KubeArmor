// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package bpflsm

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type enforcerBufsK struct {
	Path   [256]int8
	Source [256]int8
}

type enforcerBufsT struct{ Buf [32768]int8 }

// loadEnforcer returns the embedded CollectionSpec for enforcer.
func loadEnforcer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_EnforcerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load enforcer: %w", err)
	}

	return spec, err
}

// loadEnforcerObjects loads enforcer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*enforcerObjects
//	*enforcerPrograms
//	*enforcerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEnforcerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEnforcer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// enforcerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type enforcerSpecs struct {
	enforcerProgramSpecs
	enforcerMapSpecs
}

// enforcerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type enforcerProgramSpecs struct {
	EnforceCap        *ebpf.ProgramSpec `ebpf:"enforce_cap"`
	EnforceFile       *ebpf.ProgramSpec `ebpf:"enforce_file"`
	EnforceFilePerm   *ebpf.ProgramSpec `ebpf:"enforce_file_perm"`
	EnforceNetAccept  *ebpf.ProgramSpec `ebpf:"enforce_net_accept"`
	EnforceNetConnect *ebpf.ProgramSpec `ebpf:"enforce_net_connect"`
	EnforceNetCreate  *ebpf.ProgramSpec `ebpf:"enforce_net_create"`
	EnforceProc       *ebpf.ProgramSpec `ebpf:"enforce_proc"`
}

// enforcerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type enforcerMapSpecs struct {
	Bufk                   *ebpf.MapSpec `ebpf:"bufk"`
	Bufs                   *ebpf.MapSpec `ebpf:"bufs"`
	BufsOff                *ebpf.MapSpec `ebpf:"bufs_off"`
	KubearmorAlertThrottle *ebpf.MapSpec `ebpf:"kubearmor_alert_throttle"`
	KubearmorConfig        *ebpf.MapSpec `ebpf:"kubearmor_config"`
	KubearmorContainers    *ebpf.MapSpec `ebpf:"kubearmor_containers"`
	KubearmorEvents        *ebpf.MapSpec `ebpf:"kubearmor_events"`
}

// enforcerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEnforcerObjects or ebpf.CollectionSpec.LoadAndAssign.
type enforcerObjects struct {
	enforcerPrograms
	enforcerMaps
}

func (o *enforcerObjects) Close() error {
	return _EnforcerClose(
		&o.enforcerPrograms,
		&o.enforcerMaps,
	)
}

// enforcerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEnforcerObjects or ebpf.CollectionSpec.LoadAndAssign.
type enforcerMaps struct {
	Bufk                   *ebpf.Map `ebpf:"bufk"`
	Bufs                   *ebpf.Map `ebpf:"bufs"`
	BufsOff                *ebpf.Map `ebpf:"bufs_off"`
	KubearmorAlertThrottle *ebpf.Map `ebpf:"kubearmor_alert_throttle"`
	KubearmorConfig        *ebpf.Map `ebpf:"kubearmor_config"`
	KubearmorContainers    *ebpf.Map `ebpf:"kubearmor_containers"`
	KubearmorEvents        *ebpf.Map `ebpf:"kubearmor_events"`
}

func (m *enforcerMaps) Close() error {
	return _EnforcerClose(
		m.Bufk,
		m.Bufs,
		m.BufsOff,
		m.KubearmorAlertThrottle,
		m.KubearmorConfig,
		m.KubearmorContainers,
		m.KubearmorEvents,
	)
}

// enforcerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEnforcerObjects or ebpf.CollectionSpec.LoadAndAssign.
type enforcerPrograms struct {
	EnforceCap        *ebpf.Program `ebpf:"enforce_cap"`
	EnforceFile       *ebpf.Program `ebpf:"enforce_file"`
	EnforceFilePerm   *ebpf.Program `ebpf:"enforce_file_perm"`
	EnforceNetAccept  *ebpf.Program `ebpf:"enforce_net_accept"`
	EnforceNetConnect *ebpf.Program `ebpf:"enforce_net_connect"`
	EnforceNetCreate  *ebpf.Program `ebpf:"enforce_net_create"`
	EnforceProc       *ebpf.Program `ebpf:"enforce_proc"`
}

func (p *enforcerPrograms) Close() error {
	return _EnforcerClose(
		p.EnforceCap,
		p.EnforceFile,
		p.EnforceFilePerm,
		p.EnforceNetAccept,
		p.EnforceNetConnect,
		p.EnforceNetCreate,
		p.EnforceProc,
	)
}

func _EnforcerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed enforcer_bpfel.o
var _EnforcerBytes []byte
