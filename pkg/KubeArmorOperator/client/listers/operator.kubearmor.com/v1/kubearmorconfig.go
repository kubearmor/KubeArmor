// SPDX-License-Identifier: Apache-2.0
// Copyright 2023 Authors of KubeArmor

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubearmor/KubeArmor/pkg/KubeArmorOperator/api/operator.kubearmor.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeArmorConfigLister helps list KubeArmorConfigs.
// All objects returned here must be treated as read-only.
type KubeArmorConfigLister interface {
	// List lists all KubeArmorConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeArmorConfig, err error)
	// KubeArmorConfigs returns an object that can list and get KubeArmorConfigs.
	KubeArmorConfigs(namespace string) KubeArmorConfigNamespaceLister
	KubeArmorConfigListerExpansion
}

// kubeArmorConfigLister implements the KubeArmorConfigLister interface.
type kubeArmorConfigLister struct {
	indexer cache.Indexer
}

// NewKubeArmorConfigLister returns a new KubeArmorConfigLister.
func NewKubeArmorConfigLister(indexer cache.Indexer) KubeArmorConfigLister {
	return &kubeArmorConfigLister{indexer: indexer}
}

// List lists all KubeArmorConfigs in the indexer.
func (s *kubeArmorConfigLister) List(selector labels.Selector) (ret []*v1.KubeArmorConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeArmorConfig))
	})
	return ret, err
}

// KubeArmorConfigs returns an object that can list and get KubeArmorConfigs.
func (s *kubeArmorConfigLister) KubeArmorConfigs(namespace string) KubeArmorConfigNamespaceLister {
	return kubeArmorConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeArmorConfigNamespaceLister helps list and get KubeArmorConfigs.
// All objects returned here must be treated as read-only.
type KubeArmorConfigNamespaceLister interface {
	// List lists all KubeArmorConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeArmorConfig, err error)
	// Get retrieves the KubeArmorConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KubeArmorConfig, error)
	KubeArmorConfigNamespaceListerExpansion
}

// kubeArmorConfigNamespaceLister implements the KubeArmorConfigNamespaceLister
// interface.
type kubeArmorConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeArmorConfigs in the indexer for a given namespace.
func (s kubeArmorConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.KubeArmorConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeArmorConfig))
	})
	return ret, err
}

// Get retrieves the KubeArmorConfig from the indexer for a given namespace and name.
func (s kubeArmorConfigNamespaceLister) Get(name string) (*v1.KubeArmorConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubearmorconfig"), name)
	}
	return obj.(*v1.KubeArmorConfig), nil
}
