// SPDX-License-Identifier: Apache-2.0
// Copyright 2022 Authors of KubeArmor

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubearmor/KubeArmor/pkg/KubeArmorController/api/security.kubearmor.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeArmorClusterPolicyLister helps list KubeArmorClusterPolicies.
// All objects returned here must be treated as read-only.
type KubeArmorClusterPolicyLister interface {
	// List lists all KubeArmorClusterPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeArmorClusterPolicy, err error)
	// Get retrieves the KubeArmorClusterPolicy from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KubeArmorClusterPolicy, error)
	KubeArmorClusterPolicyListerExpansion
}

// kubeArmorClusterPolicyLister implements the KubeArmorClusterPolicyLister interface.
type kubeArmorClusterPolicyLister struct {
	indexer cache.Indexer
}

// NewKubeArmorClusterPolicyLister returns a new KubeArmorClusterPolicyLister.
func NewKubeArmorClusterPolicyLister(indexer cache.Indexer) KubeArmorClusterPolicyLister {
	return &kubeArmorClusterPolicyLister{indexer: indexer}
}

// List lists all KubeArmorClusterPolicies in the indexer.
func (s *kubeArmorClusterPolicyLister) List(selector labels.Selector) (ret []*v1.KubeArmorClusterPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeArmorClusterPolicy))
	})
	return ret, err
}

// Get retrieves the KubeArmorClusterPolicy from the index for a given name.
func (s *kubeArmorClusterPolicyLister) Get(name string) (*v1.KubeArmorClusterPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubearmorclusterpolicy"), name)
	}
	return obj.(*v1.KubeArmorClusterPolicy), nil
}
