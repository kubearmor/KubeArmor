// SPDX-License-Identifier: Apache-2.0
// Copyright 2022 Authors of KubeArmor

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	securitykubearmorcomv1 "github.com/kubearmor/KubeArmor/pkg/KubeArmorController/api/security.kubearmor.com/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKubeArmorClusterPolicies implements KubeArmorClusterPolicyInterface
type FakeKubeArmorClusterPolicies struct {
	Fake *FakeSecurityV1
}

var kubearmorclusterpoliciesResource = schema.GroupVersionResource{Group: "security.kubearmor.com", Version: "v1", Resource: "kubearmorclusterpolicies"}

var kubearmorclusterpoliciesKind = schema.GroupVersionKind{Group: "security.kubearmor.com", Version: "v1", Kind: "KubeArmorClusterPolicy"}

// Get takes name of the kubeArmorClusterPolicy, and returns the corresponding kubeArmorClusterPolicy object, and an error if there is any.
func (c *FakeKubeArmorClusterPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *securitykubearmorcomv1.KubeArmorClusterPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kubearmorclusterpoliciesResource, name), &securitykubearmorcomv1.KubeArmorClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorClusterPolicy), err
}

// List takes label and field selectors, and returns the list of KubeArmorClusterPolicies that match those selectors.
func (c *FakeKubeArmorClusterPolicies) List(ctx context.Context, opts v1.ListOptions) (result *securitykubearmorcomv1.KubeArmorClusterPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kubearmorclusterpoliciesResource, kubearmorclusterpoliciesKind, opts), &securitykubearmorcomv1.KubeArmorClusterPolicyList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &securitykubearmorcomv1.KubeArmorClusterPolicyList{ListMeta: obj.(*securitykubearmorcomv1.KubeArmorClusterPolicyList).ListMeta}
	for _, item := range obj.(*securitykubearmorcomv1.KubeArmorClusterPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kubeArmorClusterPolicies.
func (c *FakeKubeArmorClusterPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kubearmorclusterpoliciesResource, opts))
}

// Create takes the representation of a kubeArmorClusterPolicy and creates it.  Returns the server's representation of the kubeArmorClusterPolicy, and an error, if there is any.
func (c *FakeKubeArmorClusterPolicies) Create(ctx context.Context, kubeArmorClusterPolicy *securitykubearmorcomv1.KubeArmorClusterPolicy, opts v1.CreateOptions) (result *securitykubearmorcomv1.KubeArmorClusterPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kubearmorclusterpoliciesResource, kubeArmorClusterPolicy), &securitykubearmorcomv1.KubeArmorClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorClusterPolicy), err
}

// Update takes the representation of a kubeArmorClusterPolicy and updates it. Returns the server's representation of the kubeArmorClusterPolicy, and an error, if there is any.
func (c *FakeKubeArmorClusterPolicies) Update(ctx context.Context, kubeArmorClusterPolicy *securitykubearmorcomv1.KubeArmorClusterPolicy, opts v1.UpdateOptions) (result *securitykubearmorcomv1.KubeArmorClusterPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kubearmorclusterpoliciesResource, kubeArmorClusterPolicy), &securitykubearmorcomv1.KubeArmorClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorClusterPolicy), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKubeArmorClusterPolicies) UpdateStatus(ctx context.Context, kubeArmorClusterPolicy *securitykubearmorcomv1.KubeArmorClusterPolicy, opts v1.UpdateOptions) (*securitykubearmorcomv1.KubeArmorClusterPolicy, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kubearmorclusterpoliciesResource, "status", kubeArmorClusterPolicy), &securitykubearmorcomv1.KubeArmorClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorClusterPolicy), err
}

// Delete takes name of the kubeArmorClusterPolicy and deletes it. Returns an error if one occurs.
func (c *FakeKubeArmorClusterPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(kubearmorclusterpoliciesResource, name), &securitykubearmorcomv1.KubeArmorClusterPolicy{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKubeArmorClusterPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kubearmorclusterpoliciesResource, listOpts)

	_, err := c.Fake.Invokes(action, &securitykubearmorcomv1.KubeArmorClusterPolicyList{})
	return err
}

// Patch applies the patch and returns the patched kubeArmorClusterPolicy.
func (c *FakeKubeArmorClusterPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *securitykubearmorcomv1.KubeArmorClusterPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kubearmorclusterpoliciesResource, name, pt, data, subresources...), &securitykubearmorcomv1.KubeArmorClusterPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorClusterPolicy), err
}
