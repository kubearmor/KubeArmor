Vagrant.require_version ">= 2.0.0"

if ENV['OS'] == "centos" then
  VM_IMG = "bento/centos-8"
  VM_NAME = "kubearmor-dev"
else # ubuntu
  if ENV['NETNEXT'] == "1" then
    # VM_IMG = "ubuntu/jammy64" # 5.15
    VM_IMG = "ubuntu/impish64" # 5.13
    VM_NAME = "kubearmor-dev-next"
  else
    # VM_IMG = "ubuntu/focal64" # 5.4
    VM_IMG = "ubuntu/bionic64" # 4.15
    VM_NAME = "kubearmor-dev"
  end
end

system("
    if [ #{ARGV[0]} = 'up' ]; then
      if [ ! -f ~/.ssh/id_rsa ]; then
        echo '~/.ssh/id_rsa keys does not exist.'
        ssh-keygen -t rsa -f ~/.ssh/id_rsa
      fi
    fi
")

Vagrant.configure("2") do |config|
  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  if Vagrant.has_plugin?("vagrant-reload")
    config.vbguest.auto_update = false
  end

  # vagrant@VM_NAME
  config.vm.hostname = VM_NAME

  # vagrant plugins
  config.vagrant.plugins = ["vagrant-vbguest", "vagrant-reload"]

  config.vm.define VM_NAME do |cfg|
    cfg.vm.box = VM_IMG
    cfg.vm.provider "virtualbox" do |vb|
      vb.name = VM_NAME
      vb.memory = 4096
      vb.cpus = 4
      vb.customize ['modifyvm', :id, '--nested-hw-virt', 'on']
    end
  end

  # forward port for debug
  if ENV['DLV_RPORT'] then
    config.vm.network "forwarded_port", guest: 2345, host: ENV['DLV_RPORT'], auto_correct: true
  end

  # sync directories
  kubearmor_home = "../.."
  config.vm.synced_folder kubearmor_home, "/home/vagrant/KubeArmor", owner:"vagrant", group:"vagrant"

  # copy ssh keys
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "/home/vagrant/.ssh/id_rsa.pub"
  config.vm.provision :shell, :inline => "cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys", run: "always"

  # copy git config
  config.vm.provision :file, source: "~/.gitconfig", destination: "$HOME/.gitconfig"

  if ENV['OS'] == "centos" then
    # install base dependencies
    config.vm.provision :shell, path: kubearmor_home + "/contribution/self-managed-k8s-selinux/setup.sh"

    # install Docker
    config.vm.provision :shell, path: kubearmor_home + "/contribution/self-managed-k8s-selinux/docker/install_docker.sh"

    # install Kubernetes
    config.vm.provision :shell, path: kubearmor_home + "/contribution/self-managed-k8s-selinux/k8s/install_kubernetes.sh"

    # initialize Kubernetes
    config.vm.provision :shell, :inline => "MASTER=true /home/vagrant/KubeArmor/contribution/self-managed-k8s-selinux/k8s/initialize_kubernetes.sh"

    # enable SELinux
    config.vm.provision :shell, path: kubearmor_home + "/contribution/self-managed-k8s-selinux/enable_selinux.sh"
  else # ubuntu
    # install base dependencies
    config.vm.provision :shell, path: kubearmor_home + "/contribution/self-managed-k8s/setup.sh"

    if ENV['RUNTIME'] == "containerd" then
      config.vm.provision :shell, path: kubearmor_home + "/contribution/self-managed-k8s/containerd/install-containerd.sh"
    else # default == 'docker'
      config.vm.provision :shell, path: kubearmor_home + "/contribution/self-managed-k8s/docker/install_docker.sh"
    end

    # install Kubernetes
    config.vm.provision :shell, path: kubearmor_home + "/contribution/self-managed-k8s/k8s/install_kubernetes.sh"

    # initialize Kubernetes
    config.vm.provision :shell, :inline => "MASTER=true /home/vagrant/KubeArmor/contribution/self-managed-k8s/k8s/initialize_kubernetes.sh"
  end

  # install karmor
  config.vm.provision :shell, :inline => "curl -sfL https://raw.githubusercontent.com/kubearmor/kubearmor-client/main/install.sh | sudo sh -s -- -b /usr/local/bin latest"

  # change permissions
  config.vm.provision :shell, :inline => "mkdir -p /home/vagrant/go; chown -R vagrant:vagrant /home/vagrant/go"

  # avoid "make: warning: Clock skew detected."
  config.vm.provision :shell, path: kubearmor_home + "/contribution/vagrant/time-update.sh"
end
