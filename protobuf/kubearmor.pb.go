// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: kubearmor.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Health check
type NonceMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         int32                  `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NonceMessage) Reset() {
	*x = NonceMessage{}
	mi := &file_kubearmor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceMessage) ProtoMessage() {}

func (x *NonceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceMessage.ProtoReflect.Descriptor instead.
func (*NonceMessage) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{0}
}

func (x *NonceMessage) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// message struct
type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	UpdatedTime   string                 `protobuf:"bytes,2,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	ClusterName   string                 `protobuf:"bytes,3,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	HostName      string                 `protobuf:"bytes,4,opt,name=HostName,proto3" json:"HostName,omitempty"`
	HostIP        string                 `protobuf:"bytes,5,opt,name=HostIP,proto3" json:"HostIP,omitempty"`
	Type          string                 `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
	Level         string                 `protobuf:"bytes,7,opt,name=Level,proto3" json:"Level,omitempty"`
	Message       string                 `protobuf:"bytes,8,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_kubearmor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Message) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Message) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *Message) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Message) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *Message) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Message) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// podowner struct
type Podowner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ref           string                 `protobuf:"bytes,1,opt,name=Ref,proto3" json:"Ref,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Namespace     string                 `protobuf:"bytes,3,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Podowner) Reset() {
	*x = Podowner{}
	mi := &file_kubearmor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Podowner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Podowner) ProtoMessage() {}

func (x *Podowner) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Podowner.ProtoReflect.Descriptor instead.
func (*Podowner) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{2}
}

func (x *Podowner) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Podowner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Podowner) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// execevent struct
type ExecEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ExecID         string                 `protobuf:"bytes,1,opt,name=ExecID,proto3" json:"ExecID,omitempty"`
	ExecutableName string                 `protobuf:"bytes,2,opt,name=ExecutableName,proto3" json:"ExecutableName,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExecEvent) Reset() {
	*x = ExecEvent{}
	mi := &file_kubearmor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecEvent) ProtoMessage() {}

func (x *ExecEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecEvent.ProtoReflect.Descriptor instead.
func (*ExecEvent) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{3}
}

func (x *ExecEvent) GetExecID() string {
	if x != nil {
		return x.ExecID
	}
	return ""
}

func (x *ExecEvent) GetExecutableName() string {
	if x != nil {
		return x.ExecutableName
	}
	return ""
}

// alert struct
type Alert struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Timestamp              int64                  `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	UpdatedTime            string                 `protobuf:"bytes,2,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	ClusterName            string                 `protobuf:"bytes,3,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	HostName               string                 `protobuf:"bytes,4,opt,name=HostName,proto3" json:"HostName,omitempty"`
	NamespaceName          string                 `protobuf:"bytes,5,opt,name=NamespaceName,proto3" json:"NamespaceName,omitempty"`
	Owner                  *Podowner              `protobuf:"bytes,31,opt,name=Owner,proto3" json:"Owner,omitempty"`
	PodName                string                 `protobuf:"bytes,6,opt,name=PodName,proto3" json:"PodName,omitempty"`
	Labels                 string                 `protobuf:"bytes,29,opt,name=Labels,proto3" json:"Labels,omitempty"`
	ContainerID            string                 `protobuf:"bytes,7,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	ContainerName          string                 `protobuf:"bytes,8,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	ContainerImage         string                 `protobuf:"bytes,24,opt,name=ContainerImage,proto3" json:"ContainerImage,omitempty"`
	HostPPID               int32                  `protobuf:"varint,27,opt,name=HostPPID,proto3" json:"HostPPID,omitempty"`
	HostPID                int32                  `protobuf:"varint,9,opt,name=HostPID,proto3" json:"HostPID,omitempty"`
	PPID                   int32                  `protobuf:"varint,10,opt,name=PPID,proto3" json:"PPID,"`
	PID                    int32                  `protobuf:"varint,11,opt,name=PID,proto3" json:"PID,omitempty"`
	UID                    int32                  `protobuf:"varint,12,opt,name=UID,proto3" json:"UID,"`
	ParentProcessName      string                 `protobuf:"bytes,25,opt,name=ParentProcessName,proto3" json:"ParentProcessName,omitempty"`
	ProcessName            string                 `protobuf:"bytes,26,opt,name=ProcessName,proto3" json:"ProcessName,omitempty"`
	PolicyName             string                 `protobuf:"bytes,13,opt,name=PolicyName,proto3" json:"PolicyName,omitempty"`
	Severity               string                 `protobuf:"bytes,14,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Tags                   string                 `protobuf:"bytes,15,opt,name=Tags,proto3" json:"Tags,omitempty"`
	ATags                  []string               `protobuf:"bytes,30,rep,name=ATags,proto3" json:"ATags,omitempty"`
	Message                string                 `protobuf:"bytes,16,opt,name=Message,proto3" json:"Message,omitempty"`
	Type                   string                 `protobuf:"bytes,17,opt,name=Type,proto3" json:"Type,omitempty"`
	Source                 string                 `protobuf:"bytes,18,opt,name=Source,proto3" json:"Source,omitempty"`
	Operation              string                 `protobuf:"bytes,19,opt,name=Operation,proto3" json:"Operation,omitempty"`
	Resource               string                 `protobuf:"bytes,20,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Data                   string                 `protobuf:"bytes,21,opt,name=Data,proto3" json:"Data,omitempty"`
	Enforcer               string                 `protobuf:"bytes,28,opt,name=Enforcer,proto3" json:"Enforcer,omitempty"`
	Action                 string                 `protobuf:"bytes,22,opt,name=Action,proto3" json:"Action,omitempty"`
	Result                 string                 `protobuf:"bytes,23,opt,name=Result,proto3" json:"Result,omitempty"`
	Cwd                    string                 `protobuf:"bytes,32,opt,name=Cwd,proto3" json:"Cwd,omitempty"`
	TTY                    string                 `protobuf:"bytes,33,opt,name=TTY,proto3" json:"TTY,omitempty"`
	MaxAlertsPerSec        int32                  `protobuf:"varint,34,opt,name=MaxAlertsPerSec,proto3" json:"MaxAlertsPerSec,omitempty"`
	DroppingAlertsInterval int32                  `protobuf:"varint,35,opt,name=DroppingAlertsInterval,proto3" json:"DroppingAlertsInterval,omitempty"`
	ExecEvent              *ExecEvent             `protobuf:"bytes,36,opt,name=ExecEvent,proto3" json:"ExecEvent,omitempty"`
	KubeArmorVersion       string                 `protobuf:"bytes,37,opt,name=KubeArmorVersion,proto3" json:"KubeArmorVersion,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Alert) Reset() {
	*x = Alert{}
	mi := &file_kubearmor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{4}
}

func (x *Alert) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Alert) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Alert) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *Alert) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Alert) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *Alert) GetOwner() *Podowner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Alert) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *Alert) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *Alert) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *Alert) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Alert) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *Alert) GetHostPPID() int32 {
	if x != nil {
		return x.HostPPID
	}
	return 0
}

func (x *Alert) GetHostPID() int32 {
	if x != nil {
		return x.HostPID
	}
	return 0
}

func (x *Alert) GetPPID() int32 {
	if x != nil {
		return x.PPID
	}
	return 0
}

func (x *Alert) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *Alert) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *Alert) GetParentProcessName() string {
	if x != nil {
		return x.ParentProcessName
	}
	return ""
}

func (x *Alert) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *Alert) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *Alert) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Alert) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Alert) GetATags() []string {
	if x != nil {
		return x.ATags
	}
	return nil
}

func (x *Alert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Alert) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Alert) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Alert) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Alert) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Alert) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Alert) GetEnforcer() string {
	if x != nil {
		return x.Enforcer
	}
	return ""
}

func (x *Alert) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Alert) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Alert) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Alert) GetTTY() string {
	if x != nil {
		return x.TTY
	}
	return ""
}

func (x *Alert) GetMaxAlertsPerSec() int32 {
	if x != nil {
		return x.MaxAlertsPerSec
	}
	return 0
}

func (x *Alert) GetDroppingAlertsInterval() int32 {
	if x != nil {
		return x.DroppingAlertsInterval
	}
	return 0
}

func (x *Alert) GetExecEvent() *ExecEvent {
	if x != nil {
		return x.ExecEvent
	}
	return nil
}

func (x *Alert) GetKubeArmorVersion() string {
	if x != nil {
		return x.KubeArmorVersion
	}
	return ""
}

// log struct
type Log struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Timestamp         int64                  `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	UpdatedTime       string                 `protobuf:"bytes,2,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	ClusterName       string                 `protobuf:"bytes,3,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	HostName          string                 `protobuf:"bytes,4,opt,name=HostName,proto3" json:"HostName,omitempty"`
	NamespaceName     string                 `protobuf:"bytes,5,opt,name=NamespaceName,proto3" json:"NamespaceName,omitempty"`
	Owner             *Podowner              `protobuf:"bytes,24,opt,name=Owner,proto3" json:"Owner,omitempty"`
	PodName           string                 `protobuf:"bytes,6,opt,name=PodName,proto3" json:"PodName,omitempty"`
	Labels            string                 `protobuf:"bytes,23,opt,name=Labels,proto3" json:"Labels,omitempty"`
	ContainerID       string                 `protobuf:"bytes,7,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	ContainerName     string                 `protobuf:"bytes,8,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	ContainerImage    string                 `protobuf:"bytes,19,opt,name=ContainerImage,proto3" json:"ContainerImage,omitempty"`
	ParentProcessName string                 `protobuf:"bytes,20,opt,name=ParentProcessName,proto3" json:"ParentProcessName,omitempty"`
	ProcessName       string                 `protobuf:"bytes,21,opt,name=ProcessName,proto3" json:"ProcessName,omitempty"`
	HostPPID          int32                  `protobuf:"varint,22,opt,name=HostPPID,proto3" json:"HostPPID,omitempty"`
	HostPID           int32                  `protobuf:"varint,9,opt,name=HostPID,proto3" json:"HostPID,omitempty"`
	PPID              int32                  `protobuf:"varint,10,opt,name=PPID,proto3" json:"PPID,"`
	PID               int32                  `protobuf:"varint,11,opt,name=PID,proto3" json:"PID,omitempty"`
	UID               int32                  `protobuf:"varint,12,opt,name=UID,proto3" json:"UID,"`
	Type              string                 `protobuf:"bytes,13,opt,name=Type,proto3" json:"Type,omitempty"`
	Source            string                 `protobuf:"bytes,14,opt,name=Source,proto3" json:"Source,omitempty"`
	Operation         string                 `protobuf:"bytes,15,opt,name=Operation,proto3" json:"Operation,omitempty"`
	Resource          string                 `protobuf:"bytes,16,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Data              string                 `protobuf:"bytes,17,opt,name=Data,proto3" json:"Data,omitempty"`
	Result            string                 `protobuf:"bytes,18,opt,name=Result,proto3" json:"Result,omitempty"`
	Cwd               string                 `protobuf:"bytes,25,opt,name=Cwd,proto3" json:"Cwd,omitempty"`
	TTY               string                 `protobuf:"bytes,26,opt,name=TTY,proto3" json:"TTY,omitempty"`
	ExecEvent         *ExecEvent             `protobuf:"bytes,27,opt,name=ExecEvent,proto3" json:"ExecEvent,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_kubearmor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{5}
}

func (x *Log) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Log) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Log) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *Log) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Log) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *Log) GetOwner() *Podowner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Log) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *Log) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *Log) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *Log) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Log) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *Log) GetParentProcessName() string {
	if x != nil {
		return x.ParentProcessName
	}
	return ""
}

func (x *Log) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *Log) GetHostPPID() int32 {
	if x != nil {
		return x.HostPPID
	}
	return 0
}

func (x *Log) GetHostPID() int32 {
	if x != nil {
		return x.HostPID
	}
	return 0
}

func (x *Log) GetPPID() int32 {
	if x != nil {
		return x.PPID
	}
	return 0
}

func (x *Log) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *Log) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *Log) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Log) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Log) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Log) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Log) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Log) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Log) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Log) GetTTY() string {
	if x != nil {
		return x.TTY
	}
	return ""
}

func (x *Log) GetExecEvent() *ExecEvent {
	if x != nil {
		return x.ExecEvent
	}
	return nil
}

// request message
type RequestMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        string                 `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestMessage) Reset() {
	*x = RequestMessage{}
	mi := &file_kubearmor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMessage) ProtoMessage() {}

func (x *RequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMessage.ProtoReflect.Descriptor instead.
func (*RequestMessage) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{6}
}

func (x *RequestMessage) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// reply message
type ReplyMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Retval        int32                  `protobuf:"varint,1,opt,name=Retval,proto3" json:"Retval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplyMessage) Reset() {
	*x = ReplyMessage{}
	mi := &file_kubearmor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessage) ProtoMessage() {}

func (x *ReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessage.ProtoReflect.Descriptor instead.
func (*ReplyMessage) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{7}
}

func (x *ReplyMessage) GetRetval() int32 {
	if x != nil {
		return x.Retval
	}
	return 0
}

var File_kubearmor_proto protoreflect.FileDescriptor

var file_kubearmor_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0xe3, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x50, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x08, 0x50, 0x6f, 0x64, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x65, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x45, 0x78, 0x65, 0x63, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xdc, 0x08, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x50, 0x50, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x50, 0x50, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x50, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x50, 0x50, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x41, 0x54, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x43, 0x77, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x77, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x59, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54,
	0x54, 0x59, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4d, 0x61, 0x78,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x16,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x45, 0x78, 0x65, 0x63,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x98, 0x06, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x50, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x50, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x50, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x50, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x50, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x77, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x77, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x59,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x54, 0x59, 0x12, 0x2f, 0x0a, 0x09, 0x45,
	0x78, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x45, 0x78, 0x65, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x0e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x26, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x32, 0xef,
	0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x14, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x0f, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x09,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x0b, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x30, 0x01,
	0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2f, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_kubearmor_proto_rawDescOnce sync.Once
	file_kubearmor_proto_rawDescData []byte
)

func file_kubearmor_proto_rawDescGZIP() []byte {
	file_kubearmor_proto_rawDescOnce.Do(func() {
		file_kubearmor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kubearmor_proto_rawDesc), len(file_kubearmor_proto_rawDesc)))
	})
	return file_kubearmor_proto_rawDescData
}

var file_kubearmor_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_kubearmor_proto_goTypes = []any{
	(*NonceMessage)(nil),   // 0: feeder.NonceMessage
	(*Message)(nil),        // 1: feeder.Message
	(*Podowner)(nil),       // 2: feeder.Podowner
	(*ExecEvent)(nil),      // 3: feeder.ExecEvent
	(*Alert)(nil),          // 4: feeder.Alert
	(*Log)(nil),            // 5: feeder.Log
	(*RequestMessage)(nil), // 6: feeder.RequestMessage
	(*ReplyMessage)(nil),   // 7: feeder.ReplyMessage
}
var file_kubearmor_proto_depIdxs = []int32{
	2, // 0: feeder.Alert.Owner:type_name -> feeder.Podowner
	3, // 1: feeder.Alert.ExecEvent:type_name -> feeder.ExecEvent
	2, // 2: feeder.Log.Owner:type_name -> feeder.Podowner
	3, // 3: feeder.Log.ExecEvent:type_name -> feeder.ExecEvent
	0, // 4: feeder.LogService.HealthCheck:input_type -> feeder.NonceMessage
	6, // 5: feeder.LogService.WatchMessages:input_type -> feeder.RequestMessage
	6, // 6: feeder.LogService.WatchAlerts:input_type -> feeder.RequestMessage
	6, // 7: feeder.LogService.WatchLogs:input_type -> feeder.RequestMessage
	7, // 8: feeder.LogService.HealthCheck:output_type -> feeder.ReplyMessage
	1, // 9: feeder.LogService.WatchMessages:output_type -> feeder.Message
	4, // 10: feeder.LogService.WatchAlerts:output_type -> feeder.Alert
	5, // 11: feeder.LogService.WatchLogs:output_type -> feeder.Log
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kubearmor_proto_init() }
func file_kubearmor_proto_init() {
	if File_kubearmor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kubearmor_proto_rawDesc), len(file_kubearmor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kubearmor_proto_goTypes,
		DependencyIndexes: file_kubearmor_proto_depIdxs,
		MessageInfos:      file_kubearmor_proto_msgTypes,
	}.Build()
	File_kubearmor_proto = out.File
	file_kubearmor_proto_goTypes = nil
	file_kubearmor_proto_depIdxs = nil
}
