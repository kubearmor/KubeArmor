// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: kvm.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KVM_RegisterAgentIdentity_FullMethodName = "/kvm.KVM/registerAgentIdentity"
	KVM_SendPolicy_FullMethodName            = "/kvm.KVM/sendPolicy"
)

// KVMClient is the client API for KVM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVMClient interface {
	RegisterAgentIdentity(ctx context.Context, in *AgentIdentity, opts ...grpc.CallOption) (*Status, error)
	SendPolicy(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Status, PolicyData], error)
}

type kVMClient struct {
	cc grpc.ClientConnInterface
}

func NewKVMClient(cc grpc.ClientConnInterface) KVMClient {
	return &kVMClient{cc}
}

func (c *kVMClient) RegisterAgentIdentity(ctx context.Context, in *AgentIdentity, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, KVM_RegisterAgentIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVMClient) SendPolicy(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Status, PolicyData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KVM_ServiceDesc.Streams[0], KVM_SendPolicy_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Status, PolicyData]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVM_SendPolicyClient = grpc.BidiStreamingClient[Status, PolicyData]

// KVMServer is the server API for KVM service.
// All implementations should embed UnimplementedKVMServer
// for forward compatibility.
type KVMServer interface {
	RegisterAgentIdentity(context.Context, *AgentIdentity) (*Status, error)
	SendPolicy(grpc.BidiStreamingServer[Status, PolicyData]) error
}

// UnimplementedKVMServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKVMServer struct{}

func (UnimplementedKVMServer) RegisterAgentIdentity(context.Context, *AgentIdentity) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgentIdentity not implemented")
}
func (UnimplementedKVMServer) SendPolicy(grpc.BidiStreamingServer[Status, PolicyData]) error {
	return status.Errorf(codes.Unimplemented, "method SendPolicy not implemented")
}
func (UnimplementedKVMServer) testEmbeddedByValue() {}

// UnsafeKVMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVMServer will
// result in compilation errors.
type UnsafeKVMServer interface {
	mustEmbedUnimplementedKVMServer()
}

func RegisterKVMServer(s grpc.ServiceRegistrar, srv KVMServer) {
	// If the following call pancis, it indicates UnimplementedKVMServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KVM_ServiceDesc, srv)
}

func _KVM_RegisterAgentIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVMServer).RegisterAgentIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVM_RegisterAgentIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVMServer).RegisterAgentIdentity(ctx, req.(*AgentIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVM_SendPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVMServer).SendPolicy(&grpc.GenericServerStream[Status, PolicyData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KVM_SendPolicyServer = grpc.BidiStreamingServer[Status, PolicyData]

// KVM_ServiceDesc is the grpc.ServiceDesc for KVM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kvm.KVM",
	HandlerType: (*KVMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerAgentIdentity",
			Handler:    _KVM_RegisterAgentIdentity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendPolicy",
			Handler:       _KVM_SendPolicy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kvm.proto",
}
