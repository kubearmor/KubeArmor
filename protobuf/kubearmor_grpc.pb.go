// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: kubearmor.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogService_HealthCheck_FullMethodName   = "/feeder.LogService/HealthCheck"
	LogService_WatchMessages_FullMethodName = "/feeder.LogService/WatchMessages"
	LogService_WatchAlerts_FullMethodName   = "/feeder.LogService/WatchAlerts"
	LogService_WatchLogs_FullMethodName     = "/feeder.LogService/WatchLogs"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	// DEPRECATED: use "google.golang.org/grpc/health/grpc_health_v1"
	HealthCheck(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ReplyMessage, error)
	WatchMessages(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	WatchAlerts(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Alert], error)
	WatchLogs(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Log], error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) HealthCheck(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ReplyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyMessage)
	err := c.cc.Invoke(ctx, LogService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) WatchMessages(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], LogService_WatchMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestMessage, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogService_WatchMessagesClient = grpc.ServerStreamingClient[Message]

func (c *logServiceClient) WatchAlerts(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Alert], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[1], LogService_WatchAlerts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestMessage, Alert]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogService_WatchAlertsClient = grpc.ServerStreamingClient[Alert]

func (c *logServiceClient) WatchLogs(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Log], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[2], LogService_WatchLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestMessage, Log]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogService_WatchLogsClient = grpc.ServerStreamingClient[Log]

// LogServiceServer is the server API for LogService service.
// All implementations should embed UnimplementedLogServiceServer
// for forward compatibility.
type LogServiceServer interface {
	// DEPRECATED: use "google.golang.org/grpc/health/grpc_health_v1"
	HealthCheck(context.Context, *NonceMessage) (*ReplyMessage, error)
	WatchMessages(*RequestMessage, grpc.ServerStreamingServer[Message]) error
	WatchAlerts(*RequestMessage, grpc.ServerStreamingServer[Alert]) error
	WatchLogs(*RequestMessage, grpc.ServerStreamingServer[Log]) error
}

// UnimplementedLogServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogServiceServer struct{}

func (UnimplementedLogServiceServer) HealthCheck(context.Context, *NonceMessage) (*ReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLogServiceServer) WatchMessages(*RequestMessage, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method WatchMessages not implemented")
}
func (UnimplementedLogServiceServer) WatchAlerts(*RequestMessage, grpc.ServerStreamingServer[Alert]) error {
	return status.Errorf(codes.Unimplemented, "method WatchAlerts not implemented")
}
func (UnimplementedLogServiceServer) WatchLogs(*RequestMessage, grpc.ServerStreamingServer[Log]) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogs not implemented")
}
func (UnimplementedLogServiceServer) testEmbeddedByValue() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).HealthCheck(ctx, req.(*NonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_WatchMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).WatchMessages(m, &grpc.GenericServerStream[RequestMessage, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogService_WatchMessagesServer = grpc.ServerStreamingServer[Message]

func _LogService_WatchAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).WatchAlerts(m, &grpc.GenericServerStream[RequestMessage, Alert]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogService_WatchAlertsServer = grpc.ServerStreamingServer[Alert]

func _LogService_WatchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).WatchLogs(m, &grpc.GenericServerStream[RequestMessage, Log]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogService_WatchLogsServer = grpc.ServerStreamingServer[Log]

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feeder.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _LogService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchMessages",
			Handler:       _LogService_WatchMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchAlerts",
			Handler:       _LogService_WatchAlerts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLogs",
			Handler:       _LogService_WatchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kubearmor.proto",
}
