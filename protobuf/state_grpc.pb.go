// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: state.proto

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StateAgent_WatchState_FullMethodName = "/state_agent.StateAgent/WatchState"
	StateAgent_GetState_FullMethodName   = "/state_agent.StateAgent/GetState"
)

// StateAgentClient is the client API for StateAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateAgentClient interface {
	// stream which continuously pushes state events
	WatchState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateEvent], error)
	// get all state events in one go
	GetState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateEvents], error)
}

type stateAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewStateAgentClient(cc grpc.ClientConnInterface) StateAgentClient {
	return &stateAgentClient{cc}
}

func (c *stateAgentClient) WatchState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StateAgent_ServiceDesc.Streams[0], StateAgent_WatchState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[empty.Empty, StateEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateAgent_WatchStateClient = grpc.ServerStreamingClient[StateEvent]

func (c *stateAgentClient) GetState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateEvents], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StateAgent_ServiceDesc.Streams[1], StateAgent_GetState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[empty.Empty, StateEvents]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateAgent_GetStateClient = grpc.ServerStreamingClient[StateEvents]

// StateAgentServer is the server API for StateAgent service.
// All implementations should embed UnimplementedStateAgentServer
// for forward compatibility.
type StateAgentServer interface {
	// stream which continuously pushes state events
	WatchState(*empty.Empty, grpc.ServerStreamingServer[StateEvent]) error
	// get all state events in one go
	GetState(*empty.Empty, grpc.ServerStreamingServer[StateEvents]) error
}

// UnimplementedStateAgentServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStateAgentServer struct{}

func (UnimplementedStateAgentServer) WatchState(*empty.Empty, grpc.ServerStreamingServer[StateEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchState not implemented")
}
func (UnimplementedStateAgentServer) GetState(*empty.Empty, grpc.ServerStreamingServer[StateEvents]) error {
	return status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStateAgentServer) testEmbeddedByValue() {}

// UnsafeStateAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateAgentServer will
// result in compilation errors.
type UnsafeStateAgentServer interface {
	mustEmbedUnimplementedStateAgentServer()
}

func RegisterStateAgentServer(s grpc.ServiceRegistrar, srv StateAgentServer) {
	// If the following call pancis, it indicates UnimplementedStateAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StateAgent_ServiceDesc, srv)
}

func _StateAgent_WatchState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateAgentServer).WatchState(m, &grpc.GenericServerStream[empty.Empty, StateEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateAgent_WatchStateServer = grpc.ServerStreamingServer[StateEvent]

func _StateAgent_GetState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateAgentServer).GetState(m, &grpc.GenericServerStream[empty.Empty, StateEvents]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateAgent_GetStateServer = grpc.ServerStreamingServer[StateEvents]

// StateAgent_ServiceDesc is the grpc.ServiceDesc for StateAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "state_agent.StateAgent",
	HandlerType: (*StateAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchState",
			Handler:       _StateAgent_WatchState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetState",
			Handler:       _StateAgent_GetState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "state.proto",
}
